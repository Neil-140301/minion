import { join, resolve } from 'path';
import { NPM } from '../../runner/index.js';
import { readFileSync, writeFileSync } from 'fs';
import { changeImport, insertData, removeLines } from '../../utils/helper.js';
import { sample_slice_next } from '../sample_slice.js';

const npm = new NPM();
const base = process.cwd();

const _app = (redux: boolean) =>
	!redux
		? `return (
	<>
		<Head>
			<title>Create Next App</title>
			<meta name="description" content="Generated by create next app" />
			<link rel="icon" href="/favicon.ico" />
		</Head>
		<Component {...pageProps} />
	</>
)`
		: `return (
	<>
		<Head>
			<title>Create Next App</title>
			<meta name="description" content="Generated by create next app" />
			<link rel="icon" href="/favicon.ico" />
		</Head>
		<Provider store={store}>
			<Component {...pageProps} />
		</Provider>
	</>
)
`;

export const withNext = (
	path: string,
	typescript: boolean = false,
	redux: boolean = false,
	yarn: boolean = true
) => {
	const projectPath = join(base, path);

	// setup the project
	npm.cmd(
		`${yarn ? 'yarn create next-app' : 'npx create-next-app'} ${
			redux ? '-e with-redux' : typescript ? '--typescript' : ''
		} ${projectPath}`
	);

	// clean up the project

	// pages folder
	npm.cwd(projectPath).cmd(`rm -rf ${redux ? 'src/pages/api' : 'pages/api'}`);

	if (redux) {
		// index and _app
		const indexFile = readFileSync(
			resolve(projectPath, `src/pages/index.tsx`),
			'utf8'
		);

		writeFileSync(
			resolve(projectPath, `src/pages/index.tsx`),
			removeLines(indexFile, [1, 3, 9, 10, 11, 12, 15])
		);

		let appFile = readFileSync(
			resolve(projectPath, `src/pages/_app.tsx`),
			'utf8'
		);

		appFile = insertData(appFile, 1, `import Head from 'next/head'`);
		appFile = removeLines(appFile, [9, 10, 11, 12, 13]);
		appFile = insertData(appFile, 9, _app(redux));
		appFile = changeImport(
			appFile,
			6,
			`import store from '../redux/store'`
		);
		writeFileSync(resolve(projectPath, `src/pages/_app.tsx`), appFile);

		// delete some redundant files
		npm.cwd(projectPath).cmd(`rm -rf jest.config.ts`);
		npm.cwd(projectPath).cmd(`rm -rf setupTests.ts`);
		npm.cwd(projectPath).cmd(`rm -rf tsconfig.test.json`);
		npm.cwd(projectPath).cmd(
			`rm -rf src/features/counter/Counter.module.css`
		);
		npm.cwd(projectPath).cmd(
			`rm -rf src/features/counter/Counter.spec.tsx`
		);
		npm.cwd(projectPath).cmd(`rm -rf src/features/counter/Counter.tsx`);
		npm.cwd(projectPath).cmd(`rm -rf src/features/counter/counterAPI.ts`);
		npm.cwd(projectPath).cmd(`rm -rf src/features`);

		// rename app -> redux
		npm.cwd(projectPath).cmd(`mv src/app src/redux`);

		// change imports
		let storeFile = readFileSync(
			resolve(projectPath, 'src/redux/store.ts'),
			'utf8'
		);
		storeFile = changeImport(
			storeFile,
			2,
			`import counterReducer from './counterSlice';`
		);
		writeFileSync(resolve(projectPath, 'src/redux/store.ts'), storeFile);

		// edit counterSlice
		writeFileSync(
			resolve(projectPath, 'src/redux/counterSlice.ts'),
			sample_slice_next
		);
	} else {
		const fileExt = typescript ? '.tsx' : '.js';
		const indexFile = readFileSync(
			resolve(projectPath, `pages/index${fileExt}`),
			'utf8'
		);
		writeFileSync(
			resolve(projectPath, `pages/index${fileExt}`),
			removeLines(
				indexFile,
				typescript ? [1, 8, 9, 10, 11, 12] : [0, 7, 8, 9, 10, 11]
			)
		);

		let appFile = readFileSync(
			resolve(projectPath, `pages/_app${fileExt}`),
			'utf8'
		);

		appFile = insertData(
			appFile,
			typescript ? 2 : 1,
			`import Head from 'next/head'`
		);
		appFile = changeImport(appFile, typescript ? 5 : 4, _app(redux));
		writeFileSync(resolve(projectPath, `pages/_app${fileExt}`), appFile);
	}

	// create components
	npm.cwd(projectPath).cmd(
		`mkdir ${redux ? 'src/components' : ' components'}`
	);
};

// withNext('../projects/test', false, false);
// withNext('../projects/test-ts', true, false);
// withNext('../projects/test-redux', false, true);
